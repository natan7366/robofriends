{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","phone","CardList","robots","map","user","i","key","SearchBox","searchfield","SearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wRAqBeA,EAlBF,SAAEC,GAGd,OAEC,yBAAKC,UAAW,uDAGf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,YAHtB,IAIC,6BACC,4BAAKJ,EAAMK,MADZ,IAEC,2BAAIL,EAAMM,OACV,qCAAWN,EAAMO,UCQNC,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAEEA,EAAOC,KAAK,SAACC,EAAMC,GAClB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdC,KAAMI,EAAOG,GAAGP,KAChBC,MAAOG,EAAOG,GAAGN,MACjBC,MAAOE,EAAOG,GAAGL,aCCTO,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKf,UAAU,OACd,2BACCA,UAAY,sCACZgB,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCODI,G,MAdA,SAACpB,GACf,OACC,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAClExB,EAAMyB,YCoFKC,G,wDA5Ed,aAAgB,IAAD,8BACd,gBAmBDC,eAAiB,SAACC,GACjB,EAAKC,SAAU,CAACd,YAAaa,EAAME,OAAOC,SAnB1C,EAAKC,MAAQ,CACZvB,OAAQ,GACRM,YAAY,IAJC,E,gEAaO,IAAD,OACpBkB,MAAM,8CACJC,MAAO,SAAAC,GAAQ,OAAIA,EAASC,UAC5BF,MAAO,SAAAG,GAAK,OAAI,EAAKR,SAAU,CAACpB,OAAQ4B,S,+BAQhC,IAAD,EACqBC,KAAKN,MAA5BvB,EADE,EACFA,OAAQM,EADN,EACMA,YACTwB,EAAiB9B,EAAO+B,QAAO,SAAAC,GACpC,OAAOA,EAAMpC,KAAKqC,cAAcC,SAAU5B,EAAY2B,kBAGvD,OAAKjC,EAAOmC,OAIV,yBAAK3C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWe,aAAgBsB,KAAKX,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAQ8B,IADnB,OANK,wBAAItC,UAAU,SAAd,e,GAhCQ4C,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVLC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5137d347.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/*instaed of class, we will work directly with function (we have learn that it is actually the same)*/\r\nconst Card = ( props ) => { \r\n// const Card = ( {name, email, id} ) => { /*the cleanest way to define the props*/\r\n\t// const {name, email, id} = props; another way to define the props (and then we shoult write {props.id} in the img src)\r\n\treturn (\r\n\t\t// <h1>RoboFriends</h1>\r\n\t\t<div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t{/*<img alt='robots' src={`https://robohash.org/test?200x200`}/>*/}\r\n\t\t\t{/*<img alt='robots' src={`https://robohash.org/${props.id}?200x200`}/> $ - using template strings (from the ES6 section) and that way we randomize the id selection*/}\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?50x50`}/> {/*without props because we already define the props at line 4*/}\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2> {/* props.name won't work because it is jsx and not html so we neeed {props.name}*/}\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t\t<p>phone: {props.phone}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n\r\n/* 2 way :*/\r\n\r\n// const Card = ( props ) => { \r\n// \tconst {name, email, id} = props; //another way to define the props (and then we shoult write {props.id} in the img src)\r\n// \treturn (\r\n// \t\t<div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n// \t\t\t{/*<img alt='robots' src={'https://robohash.org/test?200x200'}/>*/}\r\n\t\t\t\r\n// \t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/> {/*without props because we already define the props at line 4*/}\r\n// \t\t\t<div>\r\n// \t\t\t\t<h2>{name}</h2> {/* props.name won't work because it is jsx and not html so we neeed {props.name}*/}\r\n// \t\t\t\t<p>{email}</p>\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t);\r\n// }\r\n\r\n// export default Card;\r\n\r\n\r\n/* 3 way :*/\r\n\r\n// const Card = ( {name, email, id} ) => { \r\n// \treturn (\r\n// \t\t<div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n// \t\t\t{/*<img alt='robots' src={'https://robohash.org/test?200x200'}/>*/}\r\n\t\t\t\r\n// \t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/> {/*without props because we already define the props at line 4*/}\r\n// \t\t\t<div>\r\n// \t\t\t\t<h2>{name}</h2> {/* props.name won't work because it is jsx and not html so we neeed {props.name}*/}\r\n// \t\t\t\t<p>{email}</p>\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t);\r\n// }\r\n\r\n// export default Card;\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ( {robots} ) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map( (user, i) => { /*forEach is ok but map is recomended*/\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} /*when working with loops we must use key (if I WILL REMOVE ONE ROBOT SO REACT WILL NOT CONFUSE WITH THE ID) i- for index*/\r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t\tphone={robots[i].phone} \r\n\t\t\t\t\t\t/> \r\n\t\t\t\t\t );\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default CardList;\r\n\r\n// const CardList = ( {robots} ) => {\r\n// \tconst CardComponent = robots.map( (user, i) => { /*forEach is ok but map is recomended*/\r\n// \t\treturn (\r\n// \t\t\t<Card \r\n// \t\t\t\tkey={i} when working with loops we must use key (if I WILL REMOVE ONE ROBOT SO REACT WILL NOT CONFUSE WITH THE ID) i- for index\r\n// \t\t\t\tid={robots[i].id} \r\n// \t\t\t\tname={robots[i].name} \r\n// \t\t\t\temail={robots[i].email} \r\n// \t\t\t/> )\r\n// \t})\r\n\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t{CardComponent}\r\n// \t\t</div>\t\r\n// \t);\r\n// }\r\n\r\n// export default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ( {searchfield, SearchChange} ) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName = 'tc pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange= { SearchChange } /*an event of DOM*/\r\n\t\t\t />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '2px solid black', height:'600px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\n// const Scroll = (props) => {\r\n// \tconsole.log(props);\r\n// \treturn props.children\r\n// }\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import { robots } from './robots'; /*{}- cause I export more than one item (not default export) for ex: {robots, cats} */\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\n\r\n// STATE - THE DESCRIPTION OF THE APP (AN OBJECT)\r\n\r\n/*in order to use state, we must declare App by class (the old way) and not const etc*/\r\nclass App extends Component{\r\n\tconstructor () {\r\n\t\tsuper ()\r\n\t\tthis.state = { /*'this' - can change the App*/\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// onSearchChange (event) {\r\n\t// \tconsole.log(event.target.value);\r\n\t// }\t\r\n\r\n\tcomponentDidMount () {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then ( response => response.json() )\r\n\t\t\t.then ( users => this.setState( {robots: users} ) )\r\n\t}\t\r\n\t\r\n\r\n\tonSearchChange = (event) => { /*special thing -watch video 211, time-21:00*/\r\n\t\tthis.setState( {searchfield: event.target.value} )\t\t\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst {robots, searchfield} = this.state; /*distructing -from now on I can just write robots instead of writing this.state.robots etc*/\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes( searchfield.toLowerCase() );\r\n\t\t})\r\n\r\n\t\tif (!robots.length) { /*robots.length===0*, another way is to write :return !robots.length? */\r\n\t\t\treturn <h1 className='tc f1'>Loading</h1>\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox SearchChange = {this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>  {/*an array of cards*/}\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t    }\t\r\n\r\n\t}\r\n\t\t\r\n\t\r\n}\r\n\r\n\r\n\r\n// \tonSearchChange = (event) => { /*special thing -watch video 211, time-21:00*/\r\n// \t\tthis.setState( {searchfield: event.target.value} )\t\r\n// \t\tconst filteredRobots = this.state.robots.filter(robot =>{\r\n// \t\t\treturn robot.name.toLowerCase().includes( this.state.searchfield.toLowerCase() )\r\n// \t\t})\t\r\n// \t\tconsole.log(filteredRobots);\t\r\n// \t}\r\n\r\n// \trender () {\r\n// \t\treturn (\r\n// \t\t\t<div className='tc'>\r\n// \t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n// \t\t\t\t<SearchBox SearchChange = {this.onSearchChange} />\r\n// \t\t\t\t<CardList robots={this.state.robots}/>  {/*an array of cards*/}\r\n// \t\t\t</div>\r\n// \t\t);\r\n// \t}\r\n\t\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'; /* A parent of card (so we can render all the cars without copy & paste) */\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// ReactDOM.render( <App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n \n "],"sourceRoot":""}